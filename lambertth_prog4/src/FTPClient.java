
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Vector;

/**
 *
 * @author Tom
 */
public class FTPClient extends javax.swing.JFrame {
    Socket s;
    PrintWriter writeSock;
    BufferedReader input;
    DataOutputStream output;
    String location = "C:\\Users\\lambertth\\Desktop\\Client";
    //String location2 = "C:\\Users\\Tom\\Desktop\\Client";

    /**
     * Creates new form Client
     */
    public FTPClient() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnConnect = new javax.swing.JButton();
        txtIP = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        btnQuit = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstClient = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstServer = new javax.swing.JList<>();
        btnGet = new javax.swing.JButton();
        btnPut = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("IP");

        jLabel2.setText("Port");

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        txtIP.setText("127.0.0.1");

        txtPort.setText("5764");

        jLabel4.setText("Output");

        txtOutput.setEditable(false);
        txtOutput.setColumns(20);
        txtOutput.setRows(5);
        jScrollPane1.setViewportView(txtOutput);

        btnQuit.setText("Quit");
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        lstClient.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(lstClient);

        lstServer.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(lstServer);

        btnGet.setText("Get");
        btnGet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetActionPerformed(evt);
            }
        });

        btnPut.setText("Put");
        btnPut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPutActionPerformed(evt);
            }
        });

        jLabel3.setText("Server Files");

        jLabel5.setText("Client Files");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(btnConnect))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(btnQuit))))
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(btnGet, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnPut, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jScrollPane2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(180, 199, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnect)
                    .addComponent(btnQuit))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGet)
                    .addComponent(btnPut))
                .addGap(11, 11, 11)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
    /** 
     * Checks if the IP and port text boxes are empty and opens a connection if 
     * they aren't empty. Sets up the input and output for the connection.
     * @param evt 
     */ 
    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        try
        {
            if(btnConnect.getText().equals("Connect"))
            {
                if(!txtIP.getText().equals("") && !txtPort.getText().equals(""))
                {
                    //inFromUser = new BufferedReader(new InputStreamReader
                            //(System.in));
                    s = new Socket(txtIP.getText(), 
                            Integer.parseInt(txtPort.getText()));
                    txtOutput.setText(txtOutput.getText() 
                            +  "Connected to Server\n");
                    input = new BufferedReader(new InputStreamReader(
                            s.getInputStream()));
                    writeSock = new PrintWriter(s.getOutputStream(), true);
                    btnConnect.setText("Disconnect");
                    listRemoteFiles(input.readLine());
                }
            }
            else
            {
                Vector items = new Vector();
                lstServer.setListData(items);
                close();
            } 
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
        
    }//GEN-LAST:event_btnConnectActionPerformed
        
    /** 
     * Exits the program
     * @param evt 
     */ 
    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        
        System.exit(0);
    }//GEN-LAST:event_btnQuitActionPerformed
        
    /**
     * When the get button is pushed, checks if something is selected 
     * in the list box and it is connected to a server. Calls receiveFile with 
     * filename as parameter.
     * @param evt 
     */
    private void btnGetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetActionPerformed
        //get the file based on name
        try
        {
            if(lstServer.getSelectedValue() != null)
            {
                if(btnConnect.getText().equals("Disconnect"))
                {
                    receiveFile(lstServer.getSelectedValue());
                }
            }
            else
            {
                txtOutput.setText(txtOutput.getText() 
                            + "Please select a file to transfer. \n");
            }
        }
        catch(Exception ex)
        {
            
        } 
    }//GEN-LAST:event_btnGetActionPerformed
        
    /**
     * Put button pushed, checks if connected to a server and 
     * something selected in list box. Calls send with filename as parameter.
     * @param evt 
     */
    private void btnPutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPutActionPerformed

        String temp = lstClient.getSelectedValue();
        try
        {
            if(lstClient.getSelectedValue() != null)
            {
                if(btnConnect.getText().equals("Disconnect"))
                {
                    send(temp);
                }
            }
            else
            {
                txtOutput.setText(txtOutput.getText() 
                            + "Please select a file to transfer. \n");
            }
            
        }
        catch(Exception ex)
        {
            
        }
    }//GEN-LAST:event_btnPutActionPerformed
        
    /**
     * Writes put and file name to server > opens new socket after server opens 
     * socket and sends new port number. Handles input and output for 
     * new connection. Looks through the file list until the filenames match
     * Reads 1024 bytes from file into mybytearray and writes mybytearray to 
     * server. Closes new connection after done sending file. Lists new server
     * files.
     * @param filename
     * @throws Exception 
     */
    public void send(String filename) throws Exception {
        txtOutput.setText(txtOutput.getText() + "Sending file: " + filename + 
                "\n");
        writeSock.println("put");
        writeSock.println(filename);
        int temp1 = Integer.parseInt(input.readLine());
        Socket s2 = new Socket(txtIP.getText(), temp1);
        File folder = new File(location);
        File[] listofFiles = folder.listFiles();
        
        FileInputStream fos = new FileInputStream(location + "\\" + filename);
        DataOutputStream out = new DataOutputStream(new 
                BufferedOutputStream(s2.getOutputStream()));
        int current = 0;
        for(int i = 0; i < listofFiles.length; i++)
        {
            if(listofFiles[i].getName().equals(filename))
            {
                int filesize = 1024;
                byte[] mybytearray = new byte[filesize];
                while(fos.read(mybytearray) != -1)
                {
                    current = current + filesize;
                    out.write(mybytearray);
                    out.flush();
                }
            }
        }
        txtOutput.setText(txtOutput.getText() + "Bytes sent: " + current 
                + "\n");
        
        out.close();
        fos.close();
        s2.close();     
        txtOutput.setText(txtOutput.getText() + "Connection closed: \n");
        listRemoteFiles(input.readLine());
    }   
        
    /**
     * Writes get to server and sends filename to server. Server opens new 
     * socket and sends port. Open new socket using port and setup input and 
     * output of connection. Reads mybytearray from connection 1024 bytes at a 
     * time and writes to file. Closes connection when done.Updates local files.
     * @param filename
     * @throws Exception 
     */
    public void receiveFile(String filename) throws Exception {
        txtOutput.setText(txtOutput.getText() + "Receiving file: " + filename + 
                "\n");
        writeSock.println("get");
        String temp = lstServer.getSelectedValue();
        writeSock.println(temp);
        int temp1 = Integer.parseInt(input.readLine());
        Socket s2 = new Socket(txtIP.getText(), temp1);
        DataInputStream in = new 
            DataInputStream(new BufferedInputStream(s2.getInputStream()));
        FileOutputStream fos = new FileOutputStream(location + "\\" + filename);
        
        int filesize = 1024;
        int bytesRead;
        int current = 0;
        byte[] mybytearray = new byte[filesize];
        while((bytesRead = in.read(mybytearray)) > 0)
        {
            current += bytesRead;
            fos.write(mybytearray, 0, bytesRead);
        }
        txtOutput.setText(txtOutput.getText() + "Bytes received: " + current 
                + "\n");
        
        in.close();
        fos.close();
        s2.close();
        listLocalFiles();
    }
    
    /**
     * Clears the server list and lists the local files.
     * @param evt 
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        listLocalFiles();
        Vector items = new Vector();
        lstServer.setListData(items);
    }//GEN-LAST:event_formWindowOpened
    
    /**
     * Sets up a vector to hold the file names. Goes through a directory at 
     * location and gets only files (not folders).
     */
    private void listLocalFiles()
    {
        Vector items = new Vector();
        lstClient.clearSelection();
        File dir = new File(location);
        File [] files = dir.listFiles();
        for(int i = 0; i < files.length; i++)
        {
            if(files[i].isFile())
            {
                items.add(files[i].getName());
            }
        }
        lstClient.setListData(items);
    }
    
    /**
     * Receives a string of file names from server segmented by ',' . Makes 
     * a vector to hold the file names. Goes through the string and adds to 
     * the vector. Adds the list of filenames to the list box.
     * @param st 
     */
    private void listRemoteFiles(String st)
    {
        String[] tokens = st.split(",");
        Vector items = new Vector();
        lstServer.clearSelection();
        for(int i = 0; i < tokens.length; i++)
        {
            items.add(tokens[i]);
        }
        lstServer.setListData(items);
    }
    
    /**
     * Closes the socket, readers, and OutputStreams and resets the form
     */
    private void close()
    {
        try {
            s.close();
            btnConnect.setText("Connect");
            txtOutput.setText(txtOutput.getText() + "Disconnected!\n");
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FTPClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FTPClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FTPClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FTPClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FTPClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnGet;
    private javax.swing.JButton btnPut;
    private javax.swing.JButton btnQuit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> lstClient;
    private javax.swing.JList<String> lstServer;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextArea txtOutput;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables
}
